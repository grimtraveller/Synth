/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic framework code for a JUCE plugin processor.

  ==============================================================================
*/

#include "PluginProcessor.h"
#include "PluginEditor.h"

SynthAudioProcessor::SynthAudioProcessor()
{
	UserParams[MasterBypass] = 0.0f;//default to not bypassed
	//repeat for "OtherParams":

	int numberOfVoices = 4;

	for (int i = 0; i < numberOfVoices; i++) {
		currentGains.push_back(0.0f);
	}

	synths.push_back(&sineSynth);
	synths.push_back(&triangleSynth);
	synths.push_back(&squareSynth);
	synths.push_back(&sawtoothSynth);

	sineSynth.addSound(new SynthSound());
	for (int i = 0; i < numberOfVoices; i++) {
		sineSynth.addVoice(new SineVoice());
	}

	triangleSynth.addSound(new SynthSound());
	for (int i = 0; i < numberOfVoices; i++) {
		triangleSynth.addVoice(new TriangleVoice());
	}

	squareSynth.addSound(new SynthSound());
	for (int i = 0; i < numberOfVoices; i++) {
		squareSynth.addVoice(new SquareVoice());
	}

	sawtoothSynth.addSound(new SynthSound());
	for (int i = 0; i < numberOfVoices; i++) {
		sawtoothSynth.addVoice(new SawtoothVoice());
	}

	// default sound: no sound
	currentSynthP = nullptr;

	// envelope:
	attackMS = 0;
	gain = 1.0;
	currentGain = 0.0;

	// console:
	consoleChanged = false;

	// delay:
	delayLengthMS = 1000;
	buffer.resize(delayLengthMS * 48);

}

SynthAudioProcessor::~SynthAudioProcessor() {
	//delete currentSynthP;
}

//==============================================================================
const String SynthAudioProcessor::getName() const
{
    return JucePlugin_Name;
}

int SynthAudioProcessor::getNumParameters() {
	return totalNumParam;
}

float SynthAudioProcessor::getParameter(int index) {
	switch (index) {
	case waveFormParam:
		return waveForm;
	case attackParam:
		return attackMS;
	default:
		return 0.0f;
	}
}

void SynthAudioProcessor::setParameter(int index, float newValue) {
	switch (index) {
	case waveFormParam:
		waveForm = newValue;
		break;
	case attackParam:
		attackMS = newValue;
	default:
		UserParams[waveFormParam] = 0;
		break;
	}
}

const String SynthAudioProcessor::getParameterName(int index) {
	switch (index) {
	case waveFormParam:
		return "WaveForm";
	case attackParam:
		return "Attack";
	default:
		return String::empty;
	}
}

const String SynthAudioProcessor::getParameterText(int index) {
	switch (index) {
	case waveFormParam:
		return String(UserParams[waveFormParam]);
	case attackParam:
		return String(UserParams[attackParam]);
	default:
		return String::empty;
	}
}

const String SynthAudioProcessor::getInputChannelName (int channelIndex) const
{
    return String (channelIndex + 1);
}

const String SynthAudioProcessor::getOutputChannelName (int channelIndex) const
{
    return String (channelIndex + 1);
}

bool SynthAudioProcessor::isInputChannelStereoPair (int index) const
{
    return true;
}

bool SynthAudioProcessor::isOutputChannelStereoPair (int index) const
{
    return true;
}

bool SynthAudioProcessor::acceptsMidi() const
{
   #if JucePlugin_WantsMidiInput
    return true;
   #else
    return false;
   #endif
}

bool SynthAudioProcessor::producesMidi() const
{
   #if JucePlugin_ProducesMidiOutput
    return true;
   #else
    return false;
   #endif
}

bool SynthAudioProcessor::silenceInProducesSilenceOut() const
{
    return false;
}

double SynthAudioProcessor::getTailLengthSeconds() const
{
    return 0.0;
}

int SynthAudioProcessor::getNumPrograms()
{
    return 1;   // NB: some hosts don't cope very well if you tell them there are 0 programs,
                // so this should be at least 1, even if you're not really implementing programs.
}

int SynthAudioProcessor::getCurrentProgram()
{
    return 0;
}

void SynthAudioProcessor::setCurrentProgram (int index)
{
}

const String SynthAudioProcessor::getProgramName (int index)
{
    return String();
}

void SynthAudioProcessor::changeProgramName (int index, const String& newName)
{
}

//==============================================================================
void SynthAudioProcessor::prepareToPlay (double sampleRate, int samplesPerBlock)
{
    // Use this method as the place to do any pre-playback
    // initialisation that you need..
}

void SynthAudioProcessor::releaseResources()
{
    // When playback stops, you can use this as an opportunity to free up any
    // spare memory, etc.
}

void SynthAudioProcessor::processBlock (AudioSampleBuffer& buffer, MidiBuffer& midiMessages)
{
    // In case we have more outputs than inputs, this code clears any output
    // channels that didn't contain input data, (because these aren't
    // guaranteed to be empty - they may contain garbage).
    // I've added this to avoid people getting screaming feedback
    // when they first compile the plugin, but obviously you don't need to
    // this code if your algorithm already fills all the output channels.
    for (int i = getNumInputChannels(); i < getNumOutputChannels(); ++i)
        buffer.clear (i, 0, buffer.getNumSamples());
	
	if (waveForm >= 0) {
		// render selected sound:
		currentSynthP = synths.at(waveForm);
		currentSynthP->renderNextBlock(buffer, midiMessages, 0, buffer.getNumSamples());
		// edit envelope:
		envelope(buffer);
		// add delay:
		delay(buffer);
	}

}

//==============================================================================

template <typename FloatType>
void SynthAudioProcessor::envelope(AudioBuffer<FloatType>& buffer) {
	if (attackMS > 0) {
		for (int i = 0; i < currentSynthP->getNumVoices(); i++) {
			if (currentSynthP->getVoice(i)->isVoiceActive()) {
				if (currentGains.at(i) < gain) {
					attack(currentGains.at(i), buffer);
					log(i + ":" + std::to_string(currentGains.at(i)));
				}
			}
			else {
				currentGains.at(i) = 0.0;
			}
		}// for (voices)
	}// if (attackMS > 0)
}

template <typename FloatType>
void SynthAudioProcessor::attack(float& cg, AudioBuffer<FloatType>& buffer) {
	for (int channel = 0; channel < getNumInputChannels(); ++channel) {
		// samples = ms * samplerate(48,0)
		int attackSamples = attackMS * 48;
		// gain-plus per sample:
		float gainDelta = gain / attackSamples * buffer.getNumSamples();
		// apply gain from first to last buffer sample:
		buffer.applyGainRamp(channel, 0, buffer.getNumSamples(), cg, (cg + gainDelta));
		// add gainDelta:
		if (cg < gain) {
			cg = cg + gainDelta;
		}
		if (cg > gain) {
			cg = gain;
		}
	}// for (channels)
}

template <typename FloatType>
void SynthAudioProcessor::delay(AudioBuffer<FloatType>& buffer) {
	for (int channel = 0; channel < getNumInputChannels(); ++channel) {
		for (int i = 0; i < buffer.getNumSamples(); i++) {
			float value = this->buffer.readWithDelay(delayLengthMS * 48);
			this->buffer.write(buffer.getSample(channel, i));
			value = value + buffer.getSample(channel, i);
			buffer.setSample(channel, i, value);
		}
	}
}

inline float dB2gain(float dB){
	return pow(10, dB / 20);
}
inline float gain2dB(float gain){
	return 20 * log(gain);
}

void SynthAudioProcessor::log(std::string text) {
	consoleText = text + "\n";
	consoleChanged = true;
}

bool SynthAudioProcessor::hasEditor() const {
    return true; // (change this to false if you choose to not supply an editor)
}

AudioProcessorEditor* SynthAudioProcessor::createEditor()
{
    return new SynthAudioProcessorEditor (*this);
}

//==============================================================================
void SynthAudioProcessor::getStateInformation (MemoryBlock& destData)
{
    // You should use this method to store your parameters in the memory block.
    // You could do that either as raw data, or use the XML or ValueTree classes
    // as intermediaries to make it easy to save and load complex data.
}

void SynthAudioProcessor::setStateInformation (const void* data, int sizeInBytes)
{
    // You should use this method to restore your parameters from this memory block,
    // whose contents will have been created by the getStateInformation() call.
}

//==============================================================================
// This creates new instances of the plugin..
AudioProcessor* JUCE_CALLTYPE createPluginFilter()
{
    return new SynthAudioProcessor();
}
