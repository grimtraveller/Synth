/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic framework code for a JUCE plugin processor.

  ==============================================================================
*/

#include "PluginProcessor.h"
#include "PluginEditor.h"

SynthAudioProcessor::SynthAudioProcessor()
{
	UserParams[MasterBypass] = 0.0f;//default to not bypassed
	//repeat for "OtherParams":

	numberOfVoices = 8;
	
	synth.addSound(new SynthSound());
	for (int i = 0; i < numberOfVoices; i++) {
		synth.addVoice(new SynthVoice());
	}

	// waveform:
	waveForm = 0;

	// envelope:
	attackMS = 0;
	decayMS = 0;
	sustainLevel = 1.0;
	releaseMS = 0;
	gain = 1.0;

	// console:
	consoleChanged = false;

	// delay:
	delayLengthMS = 0;
	dryMix = 1.0;
	wetMix = 0;

	// filter:
	filterType = -1;
	x1 = 0;
	y1 = 0;

}

SynthAudioProcessor::~SynthAudioProcessor() {
}

//==============================================================================
const String SynthAudioProcessor::getName() const
{
    return JucePlugin_Name;
}

int SynthAudioProcessor::getNumParameters() {
	return totalNumParam;
}

float SynthAudioProcessor::getParameter(int index) {
	switch (index) {
	case waveFormParam:
		return waveForm;
	case attackParam:
		return attackMS;
	case delayLengthParam:
		return delayLengthMS;
	case dryMixParam:
		return dryMix;
	case wetMixParam:
		return wetMix;
	case decayParam:
		return decayMS;
	case sustainParam:
		return sustainLevel;
	case releaseParam:
		return releaseMS;
	case filterTypeParam:
		return filterType;
	default:
		return 0.0f;
	}
}

void SynthAudioProcessor::setParameter(int index, float newValue) {
	switch (index) {
	case waveFormParam:
		waveForm = newValue;
		for (int i = 0; i < numberOfVoices; i++) {
			SynthVoice* currentSynthVoice = dynamic_cast<SynthVoice*>(synth.getVoice(i));
			currentSynthVoice->setWaveForm(newValue);
		}
		break;
	case attackParam:
		attackMS = newValue;
		for (int i = 0; i < numberOfVoices; i++) {
			SynthVoice* currentSynthVoice = dynamic_cast<SynthVoice*>(synth.getVoice(i));
			currentSynthVoice->setAttackMS(newValue);
		}
		break;
	case delayLengthParam:
		delayLengthMS = (int)newValue;
		ringBuffer.resize(delayLengthMS * 48);
		break;
	case dryMixParam:
		dryMix = newValue / 100;
		break;
	case wetMixParam:
		wetMix = newValue / 100;
		break;
	case decayParam:
		decayMS = newValue;
		for (int i = 0; i < numberOfVoices; i++) {
			SynthVoice* currentSynthVoice = dynamic_cast<SynthVoice*>(synth.getVoice(i));
			currentSynthVoice->setDecayMS(newValue);
		}
		break;
	case sustainParam:
		sustainLevel = newValue / 100;
		for (int i = 0; i < numberOfVoices; i++) {
			SynthVoice* currentSynthVoice = dynamic_cast<SynthVoice*>(synth.getVoice(i));
			currentSynthVoice->setSustainLevel(newValue / 100);
		}
		break;
	case releaseParam:
		releaseMS = newValue;
		for (int i = 0; i < numberOfVoices; i++) {
			SynthVoice* currentSynthVoice = dynamic_cast<SynthVoice*>(synth.getVoice(i));
			currentSynthVoice->setReleaseMS(newValue);
		}
		break;
	case filterTypeParam:
		filterType = newValue;
		break;
	default:
		UserParams[waveFormParam] = 0;
		break;
	}
}

const String SynthAudioProcessor::getParameterName(int index) {
	switch (index) {
	case waveFormParam:
		return "WaveForm";
	case attackParam:
		return "Attack";
	case delayLengthParam:
		return "Delay Length";
	case dryMixParam:
		return "Dry Mix";
	case wetMixParam:
		return "Wet Mix";
	case decayParam:
		return "Decay";
	case sustainParam:
		return "Sustain";
	case releaseParam:
		return "Release";
	case filterTypeParam:
		return "Filter Type";
	default:
		return String::empty;
	}
}

const String SynthAudioProcessor::getParameterText(int index) {
	switch (index) {
	case waveFormParam:
		return String(UserParams[waveFormParam]);
	case attackParam:
		return String(UserParams[attackParam]);
	case delayLengthParam:
		return String(UserParams[delayLengthParam]);
	case dryMixParam:
		return String(UserParams[dryMixParam]);
	case wetMixParam:
		return String(UserParams[wetMixParam]);
	case decayParam:
		return String(UserParams[decayParam]);
	case sustainParam:
		return String(UserParams[sustainParam]);
	case releaseParam:
		return String(UserParams[releaseParam]);
	case filterTypeParam:
		return String(UserParams[filterTypeParam]);
	default:
		return String::empty;
	}
}

const String SynthAudioProcessor::getInputChannelName (int channelIndex) const
{
    return String (channelIndex + 1);
}

const String SynthAudioProcessor::getOutputChannelName (int channelIndex) const
{
    return String (channelIndex + 1);
}

bool SynthAudioProcessor::isInputChannelStereoPair (int index) const
{
    return true;
}

bool SynthAudioProcessor::isOutputChannelStereoPair (int index) const
{
    return true;
}

bool SynthAudioProcessor::acceptsMidi() const
{
   #if JucePlugin_WantsMidiInput
    return true;
   #else
    return false;
   #endif
}

bool SynthAudioProcessor::producesMidi() const
{
   #if JucePlugin_ProducesMidiOutput
    return true;
   #else
    return false;
   #endif
}

bool SynthAudioProcessor::silenceInProducesSilenceOut() const
{
    return false;
}

double SynthAudioProcessor::getTailLengthSeconds() const
{
    return 0.0;
}

int SynthAudioProcessor::getNumPrograms()
{
    return 1;   // NB: some hosts don't cope very well if you tell them there are 0 programs,
                // so this should be at least 1, even if you're not really implementing programs.
}

int SynthAudioProcessor::getCurrentProgram()
{
    return 0;
}

void SynthAudioProcessor::setCurrentProgram (int index)
{
}

const String SynthAudioProcessor::getProgramName (int index)
{
    return String();
}

void SynthAudioProcessor::changeProgramName (int index, const String& newName)
{
}

//==============================================================================
void SynthAudioProcessor::prepareToPlay (double sampleRate, int samplesPerBlock)
{
    // Use this method as the place to do any pre-playback
    // initialisation that you need..
}

void SynthAudioProcessor::releaseResources()
{
    // When playback stops, you can use this as an opportunity to free up any
    // spare memory, etc.
}

void SynthAudioProcessor::processBlock (AudioSampleBuffer& buffer, MidiBuffer& midiMessages) {

    // In case we have more outputs than inputs, this code clears any output
    // channels that didn't contain input data, (because these aren't
    // guaranteed to be empty - they may contain garbage).
    // I've added this to avoid people getting screaming feedback
    // when they first compile the plugin, but obviously you don't need to
    // this code if your algorithm already fills all the output channels.
	for (int i = getNumInputChannels(); i < getNumOutputChannels(); ++i) {
		buffer.clear(i, 0, buffer.getNumSamples());
	}
	
	if (waveForm >= 0) {

		// Debug:
		for (int i = 0; i < numberOfVoices; i++) {
			SynthVoice* currentSynthVoice = dynamic_cast<SynthVoice*>(synth.getVoice(i));
			if (currentSynthVoice->getState() != currentSynthVoice->OFF) {
				log(std::to_string(currentSynthVoice->getState()) + ", gain: " + std::to_string(*currentSynthVoice->getGain()));
			}
		}
		// render synth voices:
		synth.renderNextBlock(buffer, midiMessages, 0, buffer.getNumSamples());
		// add delay:
		delay(buffer);
		// add filter:
		filter(buffer);

	}// if (waveform >= 0)
}

//==============================================================================

template <typename FloatType>
void SynthAudioProcessor::delay(AudioBuffer<FloatType>& buffer) {
	if (delayLengthMS > 0) {
		for (int channel = 0; channel < getNumInputChannels(); ++channel) {
			for (int i = 0; i < buffer.getNumSamples(); i++) {
				float value = ringBuffer.readWithDelay(delayLengthMS * 48);
				ringBuffer.write(buffer.getSample(channel, i));
				value = value * wetMix + buffer.getSample(channel, i) * dryMix;
				buffer.setSample(channel, i, value);
			}
		} // for (channels)
	}
}

template <typename FloatType>
void SynthAudioProcessor::filter(AudioBuffer<FloatType>& buffer) {
	for (int channel = 0; channel < getNumInputChannels(); ++channel) {
		for (int i = 0; i < buffer.getNumSamples(); i++) {
			if (filterType == 0) {
				buffer.setSample(channel, i, lowPass(buffer, channel, i));
			}
			else if (filterType == 1) {
				buffer.setSample(channel, i, highPass(buffer, channel, i));
			}
			else if (filterType == 2) {
				buffer.setSample(channel, i, dcBlocker(buffer, channel, i));
			}
			else if (filterType == 3) {
				buffer.setSample(channel, i, envelope(buffer, channel, i));
			}
		}
	}
}

template <typename FloatType>
FloatType SynthAudioProcessor::lowPass(AudioBuffer<FloatType>& buffer, int channel, int index) {
	const float alpha = 0.5;
	FloatType x = buffer.getSample(channel, index);
	FloatType y = (1 - alpha) * y1 + alpha * x;
	y1 = y;
	x1 = x;
	return y;
}

template <typename FloatType>
FloatType SynthAudioProcessor::highPass(AudioBuffer<FloatType>& buffer, int channel, int index) {
	const float alpha = 0.5;
	FloatType x = buffer.getSample(channel, index);
	FloatType y = alpha * (y1 + x - x1);
	y1 = y;
	x1 = x;
	return y;
}

template <typename FloatType>
FloatType SynthAudioProcessor::dcBlocker(AudioBuffer<FloatType>& buffer, int channel, int index) {
	float R = 0.9;
	FloatType x = buffer.getSample(channel, index);
	FloatType y = x - x1 + R * y1;
	y1 = y;
	x1 = x;
	return y;
}

template <typename FloatType>
FloatType SynthAudioProcessor::envelope(AudioBuffer<FloatType>& buffer, int channel, int index) {
	// ACHTUNG: die Berechnung von alpha sollte NICHT für jedes Sample neu berechnet werden,
	// hier nur zur Demonstration!
	float tau = 1000;		// Abklingzeit im ms
	float alpha = exp((-2.2 * 1000) / (tau * getSampleRate()));
	FloatType x = buffer.getSample(channel, index);

	x = abs(x);
	FloatType y = (1 - alpha) * y1 + alpha * x;
	y1 = y;
	x1 = x;
	return y;
}

inline float dB2gain(float dB){
	return pow(10, dB / 20);
}
inline float gain2dB(float gain){
	return 20 * log(gain);
}

void SynthAudioProcessor::log(std::string text) {
	consoleText = text + "\n";
	consoleChanged = true;
}

bool SynthAudioProcessor::hasEditor() const {
    return true; // (change this to false if you choose to not supply an editor)
}

AudioProcessorEditor* SynthAudioProcessor::createEditor()
{
    return new SynthAudioProcessorEditor (*this);
}

//==============================================================================
void SynthAudioProcessor::getStateInformation (MemoryBlock& destData)
{
    // You should use this method to store your parameters in the memory block.
    // You could do that either as raw data, or use the XML or ValueTree classes
    // as intermediaries to make it easy to save and load complex data.
}

void SynthAudioProcessor::setStateInformation (const void* data, int sizeInBytes)
{
    // You should use this method to restore your parameters from this memory block,
    // whose contents will have been created by the getStateInformation() call.
}

//==============================================================================
// This creates new instances of the plugin..
AudioProcessor* JUCE_CALLTYPE createPluginFilter()
{
    return new SynthAudioProcessor();
}
