/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic framework code for a JUCE plugin processor.

  ==============================================================================
*/

#include "PluginProcessor.h"
#include "PluginEditor.h"

SynthAudioProcessor::SynthAudioProcessor() {
	init();
}

SynthAudioProcessor::~SynthAudioProcessor() {
}

void SynthAudioProcessor::init() {
	UserParams[MasterBypass] = 0.0f;//default to not bypassed
	//repeat for "OtherParams":

	// waveform:
	numberOfVoices = 8;
	synth.addSound(new SynthSound());
	for (int i = 0; i < numberOfVoices; i++) {
		synth.addVoice(new SynthVoice());
	}
	waveForm = 0;

	// console:
	consoleChanged = false;

	// delay:
	delayLengthMS = 0;
	dryMix = 1.0;
	wetMix = 0.5;
}

//==============================================================================
const String SynthAudioProcessor::getName() const {
    return JucePlugin_Name;
}

int SynthAudioProcessor::getNumParameters() {
	return totalNumParam;
}

float SynthAudioProcessor::getParameter(int index) {
	switch (index) {
	case waveFormParam:
		return waveForm;
	case delayLengthParam:
		return delayLengthMS;
	case dryMixParam:
		return dryMix;
	case wetMixParam:
		return wetMix;
	default:
		return 0.0f;
	}
}

void SynthAudioProcessor::setParameter(int index, float newValue) {
	switch (index) {
		case waveFormParam:
			waveForm = newValue;
			for (int i = 0; i < numberOfVoices; i++) {
				SynthVoice* currentSynthVoice = dynamic_cast<SynthVoice*>(synth.getVoice(i));
				currentSynthVoice->setWaveForm(newValue);
			}
			break;
		case attackParam:
			for (int i = 0; i < numberOfVoices; i++) {
				SynthVoice* currentSynthVoice = dynamic_cast<SynthVoice*>(synth.getVoice(i));
				currentSynthVoice->setAttackMS(newValue);
			}
			break;
		case delayLengthParam:
			delayLengthMS = newValue;
			if (newValue > 0) {
				int newSize = int(newValue * 48);
				ringBuffer.resize(newSize);
			}
			break;
		case dryMixParam:
			if (newValue > 0) {
				dryMix = newValue / 100;
			}
			else {
				dryMix = 0;
			}
			break;
		case wetMixParam:
			if (newValue > 0) {
				wetMix = newValue / 100;
			}
			else {
				wetMix = 0;
			}
			break;
		case decayParam:
			for (int i = 0; i < numberOfVoices; i++) {
				SynthVoice* currentSynthVoice = dynamic_cast<SynthVoice*>(synth.getVoice(i));
				currentSynthVoice->setDecayMS(newValue);
			}
			break;
		case sustainParam:
			if (newValue > 0) {
				newValue = newValue / 100;
			}
			for (int i = 0; i < numberOfVoices; i++) {
				SynthVoice* currentSynthVoice = dynamic_cast<SynthVoice*>(synth.getVoice(i));
				currentSynthVoice->setSustainLevel(newValue);
			}
			break;
		case releaseParam:
			for (int i = 0; i < numberOfVoices; i++) {
				SynthVoice* currentSynthVoice = dynamic_cast<SynthVoice*>(synth.getVoice(i));
				currentSynthVoice->setReleaseMS(newValue);
			}
			break;
		case noiseParam:
			if (newValue > 0) {
				newValue = newValue / 100;
			}
			for (int i = 0; i < numberOfVoices; i++) {
				SynthVoice* currentSynthVoice = dynamic_cast<SynthVoice*>(synth.getVoice(i));
				currentSynthVoice->setNoiseMix(newValue);
			}
			break;
		default:
			UserParams[waveFormParam] = 0;
			break;
	}
}

const String SynthAudioProcessor::getParameterName(int index) {
	switch (index) {
		case waveFormParam:
			return "WaveForm";
		case attackParam:
			return "Attack";
		case delayLengthParam:
			return "Delay Length";
		case dryMixParam:
			return "Dry Mix";
		case wetMixParam:
			return "Wet Mix";
		case decayParam:
			return "Decay";
		case sustainParam:
			return "Sustain";
		case releaseParam:
			return "Release";
		case noiseParam:
			return "Noise Mix";
	}
}

const String SynthAudioProcessor::getParameterText(int index) {
	switch (index) {
	case waveFormParam:
		return String(UserParams[waveFormParam]);
	case attackParam:
		return String(UserParams[attackParam]);
	case delayLengthParam:
		return String(UserParams[delayLengthParam]);
	case dryMixParam:
		return String(UserParams[dryMixParam]);
	case wetMixParam:
		return String(UserParams[wetMixParam]);
	case decayParam:
		return String(UserParams[decayParam]);
	case sustainParam:
		return String(UserParams[sustainParam]);
	case releaseParam:
		return String(UserParams[releaseParam]);
	default:
		return String::empty;
	}
}

const String SynthAudioProcessor::getInputChannelName (int channelIndex) const {
    return String (channelIndex + 1);
}

const String SynthAudioProcessor::getOutputChannelName (int channelIndex) const {
    return String (channelIndex + 1);
}

bool SynthAudioProcessor::isInputChannelStereoPair (int index) const {
    return true;
}

bool SynthAudioProcessor::isOutputChannelStereoPair (int index) const {
    return true;
}

bool SynthAudioProcessor::acceptsMidi() const {
   #if JucePlugin_WantsMidiInput
    return true;
   #else
    return false;
   #endif
}

bool SynthAudioProcessor::producesMidi() const {
   #if JucePlugin_ProducesMidiOutput
    return true;
   #else
    return false;
   #endif
}

bool SynthAudioProcessor::silenceInProducesSilenceOut() const {
    return false;
}

double SynthAudioProcessor::getTailLengthSeconds() const {
    return 0.0;
}

int SynthAudioProcessor::getNumPrograms() {
    return 1;   // NB: some hosts don't cope very well if you tell them there are 0 programs,
                // so this should be at least 1, even if you're not really implementing programs.
}

int SynthAudioProcessor::getCurrentProgram() {
    return 0;
}

void SynthAudioProcessor::setCurrentProgram (int index) {
}

const String SynthAudioProcessor::getProgramName (int index) {
    return String();
}

void SynthAudioProcessor::changeProgramName (int index, const String& newName) {
}

//==============================================================================
void SynthAudioProcessor::prepareToPlay (double sampleRate, int samplesPerBlock) {
    // Use this method as the place to do any pre-playback
    // initialisation that you need..
}

void SynthAudioProcessor::releaseResources() {
    // When playback stops, you can use this as an opportunity to free up any
    // spare memory, etc.
}

void SynthAudioProcessor::processBlock (AudioSampleBuffer& buffer, MidiBuffer& midiMessages) {

    // In case we have more outputs than inputs, this code clears any output
    // channels that didn't contain input data, (because these aren't
    // guaranteed to be empty - they may contain garbage).
    // I've added this to avoid people getting screaming feedback
    // when they first compile the plugin, but obviously you don't need to
    // this code if your algorithm already fills all the output channels.
	for (int i = getNumInputChannels(); i < getNumOutputChannels(); ++i) {
		buffer.clear(i, 0, buffer.getNumSamples());
	}
	
	if (waveForm >= 0) {

		// Debug:
		for (int i = 0; i < numberOfVoices; i++) {
			SynthVoice* currentSynthVoice = dynamic_cast<SynthVoice*>(synth.getVoice(i));
			if (currentSynthVoice->getState() != currentSynthVoice->OFF) {
				log("(" + std::to_string(currentSynthVoice->getState()) + ") Gain: " + std::to_string(*currentSynthVoice->getGain()));
			}
		}
		// render synth voices:
		synth.renderNextBlock(buffer, midiMessages, 0, buffer.getNumSamples());
		// add delay:
		delay(buffer);

	}// if (waveform >= 0)
}

//==============================================================================

template <typename FloatType>
void SynthAudioProcessor::delay(AudioBuffer<FloatType>& buffer) {
	if (delayLengthMS > 0) {
		for (int channel = 0; channel < getNumInputChannels(); ++channel) {
			for (int i = 0; i < buffer.getNumSamples(); i++) {
				float value = ringBuffer.readWithDelay(delayLengthMS * 48);
				ringBuffer.write(buffer.getSample(channel, i));
				value = value * wetMix + buffer.getSample(channel, i) * dryMix;
				buffer.setSample(channel, i, value);
			} // for samples
		} // for channels
	}
}

void SynthAudioProcessor::log(std::string text) {
	consoleText = text + "\n";
	consoleChanged = true;
}

bool SynthAudioProcessor::hasEditor() const {
    return true; // (change this to false if you choose to not supply an editor)
}

AudioProcessorEditor* SynthAudioProcessor::createEditor() {
    return new SynthAudioProcessorEditor (*this);
}

//==============================================================================
void SynthAudioProcessor::getStateInformation (MemoryBlock& destData) {
    // You should use this method to store your parameters in the memory block.
    // You could do that either as raw data, or use the XML or ValueTree classes
    // as intermediaries to make it easy to save and load complex data.
}

void SynthAudioProcessor::setStateInformation (const void* data, int sizeInBytes) {
    // You should use this method to restore your parameters from this memory block,
    // whose contents will have been created by the getStateInformation() call.
}

//==============================================================================
// This creates new instances of the plugin..
AudioProcessor* JUCE_CALLTYPE createPluginFilter() {
    return new SynthAudioProcessor();
}